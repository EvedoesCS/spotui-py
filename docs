+ ------------------------------------------- +
            Docs for Spotui-py
+ ------------------------------------------- +


+ --------------- +
|       Auth      |
+ --------------- +

Auth functions follow the Oauth2 auth code with PKCE flow.

class CallbackServer: is used to handle requests coming to a 
short lived callback server hosted on port 8080. The do_GET()
handler will await incoming requests respond with a 200 OK status code
and return a small HTML response for the user to close their
browser. 

The code verifer and code challenge parameters are generated by
generate_pkce_pair from a PKCE library hosted at https://github.com/RomeoDespres/pkce

get_access_token(): Will make a GET request to the endpoint
https://accounts.spotify.com/authorize with the parameters outlined in 
https://developer.spotify.com/documentation/web-api/tutorials/code-pkce-flow .
a small socket web server will also be spun up on port 8080 to 
handle the callback request returned after a successful authentication
bearing the access token.

set_token(): Takes the code retrieved from get_access token and makes a POST 
request to the https://accounts.spotify.com/api/token endpoint using the parameters
detailed in https://developer.spotify.com/documentation/web-api/tutorials/code-pkce-flow .
The token is then taken from JSON data send after a successful request and the
'spotui_token' env variable is set.

refresh_token(): Takes the access token in the 'spotui_token' env variable and
exchanges it for a fresh token following the protocol found described in
https://developer.spotify.com/documentation/web-api/tutorials/refreshing-tokens .
The 'spotui_token' env variable is then re-defined with the fresh token.

authenticate(): Checks if 'spotui_token' is already defined and either returns the stored
variable or calls set_token() and returns the new token.


+ --------------- +
|      Util       |
+ --------------- +

class QueryItem: The class is used for storing query data to be displayed and
used in routes and ui elements.

format_to_QI(): Takes raw query data and returns a list of QueryItems.

read_config(): Reads the file 'config' which expects Label=Data formated items and
reads them into a dictionary with 'Label' as the Keys and 'Data' as the values.


+ --------------- +
|     Routes      |
+ --------------- +

Defines routes for retrieving data from the Spotify-api 

search(): Takes a query string and sends it to the 
spotify api /v1/search endpoint. The response JSON is returned as
a dictionary to be transformed by the util.format_to_QI() function.

play(): Makes a PUT request to the /v1/me/player/play endpoint 
and with a track id which begins playback the users currently active
spotify connect device. 

pause(): Makes a PUT request to the /v1/me/player/pause endpoint 
which pauses playback on the users currently active spotify connect device.

get_devices(): Makes a GET request to the /v1/me/player/devices endpoint
to retrieve the users currently active spotify connect devices.


+ --------------- +
|       UI        |
+ --------------- +

UI classes and methods use the Curses graphics library
to render the Spotui-py application front end.

--- SearchBarWin ---

Class defines the search bar ui element.

render(): Renders the search bar UI element.

get_query(): Captures user input and returns either
an 'exit' flag or the query collected from the user.

--- ContentWin ---

Class defines the main content window for rendering and navigating query data.

render(): Renders the content UI element.

render_data(): Takes a list of query data and renders it in the content window

traverse(): Moves the cursor to the content window and captures navigation 
input. The function returns either: a 'play' flag and track ID or an 'exit' flag
marking a successful ESC sequence.

--- LinksWin ---

Class defines the user data window which renders user data such as user created playlist,
liked songs, and user recomended playlists to be used as quick links.

render(): Renders the Links window UI element.

--- TimelineWin ---

Class defines functionality for the playback timeline which displays track progression
and information, play / pause status and volume information.

render(): Renders the Timeline UI element.


+ --------------- +
|       App       |
+ --------------- +

--- App ---

Class defines the base curses window.

search(): Captures a query string from application 'search_bar' component,
passes the string through the search route, and re-renders the 'content' component
with the data retrieved from the search. If search() returns 'exit' the control loop
will do nothing upon exit, however if search() returns 'query' the control loop will call
the traverse() method on the 'content' component.

play(): Fetches the track id of the track to be played and calls the play() route.
Finally sets the state of timeline's 'is_playing' bool to true.

pause(): Calls the pause route which interupts playback on the users currently active spotify
connect device. Also sets the state of timelines's 'is_playing' bool to False. Finally pause 
sets the value of 'position_ms' in timeline_bar to be the current progression through the track
in ms.

resume(): Calls the play route which resumes playback of a provided track from the supplied 
timestamp. resume() sets the value of 'is_playing' to True.

render_model(): Renders the application. Until the 'q' key is registered 
the application will handle key events from the user. The defined events make calls
to the handle_msg() method.
